# -*- coding: utf-8 -*-
import logging
logger = logging.getLogger(__name__)

from concurrent.futures import ThreadPoolExecutor
from transformers import BertModel, BertTokenizer
from summarizer import Summarizer
from typing import Tuple
import aiofiles
import asyncio
import re
import os

from config import PATH_TO_SUM_MODEL, PATH_TO_OUTPUTS_FILES

# import os
# here = os.getcwd()
# PATH_TO_SUM_MODEL = os.path.join(here, "..", '..', 'ai_models', 'text2text_summary', "bert-large-uncased")

class SummarizerAsync:
    def __init__(self):
        logger.debug(f"AsyncSummarizer starting initialization| chache: {PATH_TO_SUM_MODEL}")
        model = BertModel.from_pretrained(PATH_TO_SUM_MODEL, cache_dir=PATH_TO_SUM_MODEL,
                                          use_safetensors=True, local_files_only=True, output_hidden_states=True)
        tokenizer = BertTokenizer.from_pretrained(PATH_TO_SUM_MODEL, cache_dir=PATH_TO_SUM_MODEL, local_files_only=True)
        self.model = Summarizer(custom_model=model, custom_tokenizer=tokenizer)
        self.executor = ThreadPoolExecutor()
        logger.debug("AsyncSummarizer initialized")

    async def summarize_async(self, text):
        loop = asyncio.get_running_loop()
        summary = await loop.run_in_executor(self.executor, self.model, text)
        return summary

    def split_text_by_sentences(self, text, max_chunk_size=2000):
        sentences = re.split(r'(?<=[.!?])\s+', text)  # Разделяем текст на предложения
        chunks = []
        current_chunk = []

        for sentence in sentences:
            # Добавляем предложение, пока длина текста в чанке меньше max_chunk_size
            if sum(len(s) for s in current_chunk) + len(sentence) <= max_chunk_size:
                current_chunk.append(sentence)
            else:
                chunks.append(" ".join(current_chunk))
                current_chunk = [sentence]

        # Добавляем последний чанк, если он не пуст
        if current_chunk:
            chunks.append(" ".join(current_chunk))

        return chunks
    
    async def summarize_text(self, file_path, output_name, chunk_size=2000) -> Tuple[bool, str]:
        try:
            async with aiofiles.open(file_path, 'r', encoding='utf-8') as file:
                text = await file.read()
        except Exception as ex:
            logger.error(f"error while reading the text: {ex}")
            return False, str(ex)

        chunks = self.split_text_by_sentences(text, chunk_size)

        logger.debug("Starting summarizing text")
        tasks = [self.summarize_async(chunk) for chunk in chunks]
        summaries = await asyncio.gather(*tasks)
        logger.debug("Text summarized")
        
        output_path = os.path.join(PATH_TO_OUTPUTS_FILES, output_name)
        try:
            async with aiofiles.open(output_path, 'w', encoding='utf-8') as file:
                await file.write("\n\n".join(summaries))
        except Exception as ex:
            logger.error(f"error while writing the text: {ex}")
            return False, str(ex)
        
        return True, output_path

    # async def summarize_large_text(self, text, chunk_size=2000):
    #     chunks = self.split_text_by_sentences(text, chunk_size)
    #     tasks = [self.summarize_async(chunk) for chunk in chunks]
    #     summaries = await asyncio.gather(*tasks)
    #     return "\n\n".join(summaries)

# Пример использования
# text = """
# Так, ну что, всех слышно? Отлично, давайте начнем. Хотелось бы начать с того, что у нас накопилось по поводу
#  наших пользовательских метрик и вовлеченности, потому что вроде показатели растут, но неравномерно, и особенно
#  есть моменты, которые стоит еще раз посмотреть, потому что видно, что там что-то буксует. Вот, например,
#  по активности — да, с одной стороны, у нас есть рост, но вот, допустим, возвращаемость пользователей остается
#  на одном уровне. Мне кажется, это может быть связано с тем, что интерфейс все-таки требует доработки.
#  Мы говорили об этом, но как-то пока что ничего особенно не продвинули. Я вот недавно смотрел аналитику
#  по другим платформам, и мне кажется, что там проще зайти и сориентироваться.
# Эм… ну, как бы да, можем, конечно, снова вернуться к идее добавления каких-то уведомлений или подсказок,
#  которые помогут ориентироваться. Да-да, я помню, мы обсуждали это еще пару месяцев назад, но вроде тогда
#  решили, что это может перегружать интерфейс. Но может, стоит все-таки вернуться к этому. Ага, так, вот
#  еще по поводу контента: что если сделать какие-то маленькие гайды, ну, там, что-то вроде "Как лучше
#  использовать платформу" или "Советы по настройке"? Может быть, это тоже поможет улучшить показатели.
# Да-да, я понимаю, что нужно будет немного переработать дизайн, но в принципе ничего такого сложного в
#  этом нет. Ну, то есть, да, это работа, но в целом посильная. Так, а что еще по метрикам? Ага, вот про
#  вовлеченность. Мы тут посчитали, что, возможно, пользователи просто не сразу понимают, как… ну, как
#  быстро найти нужные функции. Получается, что вроде бы у нас есть интересные инструменты, но не все 
#  доходят до них. Вот эта идея с геймификацией — как раз то, что, наверное, стоит рассмотреть. Потому
#  что если добавить какие-то микронаграды за использование разных функций, ну там, не знаю, типа
#  бонусных баллов за первый проект, за публикацию, за комментирование, может, это немного подтолкнет
#  людей активнее пользоваться.
# Ага, вот еще на одном проекте я видел такую штуку, там они дают скидки в зависимости от того, как
#  долго клиент остается на платформе, — что-то такое не хотите попробовать? Ну да, я согласен, это
#  может быть сложнее реализовать, но почему бы не протестировать хотя бы на небольшой выборке? К тому
#  же это создает дополнительную мотивацию возвращаться, особенно если это что-то вроде накопительных 
#  скидок. Ну да, но это нужно еще с финансовым отделом обсуждать, я понимаю. Так, поехали дальше.
# Теперь еще про обратную связь от пользователей. Мы тут получили несколько комментариев, что люди
#  не всегда могут быстро получить ответ на свои вопросы. И… ага, да, я согласен, что у нас
#  есть база знаний, но может, стоит попробовать что-то типа живого чата или хотя бы выделить
#  небольшой ресурс на поддержку. Мы можем начать с какого-то простого решения, вроде FAQ, который
#  реально легко найти, чтобы пользователи могли сразу видеть ответы на популярные вопросы.
# Так, еще вот интересный момент. Некоторые пользователи пишут, что при заходе в аккаунт сложно
#  найти настройки. Может быть, просто перенести их куда-то, где они будут более заметны? Я понимаю,
#  что это вроде как небольшая деталь, но она реально может сэкономить много времени. Вот по себе знаю:
#  заходишь, не можешь сразу найти нужную кнопку, и… так, минуту тратишь просто на то, чтобы понять,
#  где эта настройка.
# Ага, еще вот идея: может, сделать что-то типа видеопомощника, который будет всплывать при первом 
# запуске? Это, конечно, не всем нравится, но можно добавить как опцию, чтобы люди сами выбирали, 
# хотят ли посмотреть. Ну, там, буквально пару минут, кратко про функции. Как считаете? Да, это тоже
# 
#  ресурс затратно, но, мне кажется, на этапе первого знакомства это может сильно помочь.
# Так, так, кто-то еще хочет добавить? Ага, по поводу дизайна вижу, пишите, да. Конечно, нужно будет
#  обсудить это с командой дизайнеров, но если у кого-то есть идеи, давайте соберем их сейчас, чтобы
#  уже было понятно, куда двигаться. Да, еще по поводу нагрузки на сервер, ведь чем больше у нас
#  функций, тем выше нагрузка, и это нужно тоже учитывать, особенно если мы решим добавить всякие
#  награды и бонусы. Надо будет проверить, как это все отразится на производительности, потому что
#  если что-то замедлит работу, то это уже может негативно повлиять на весь опыт использования платформы.
# Ну, по времени вроде успеваем, я думаю, на следующей встрече можем уже что-то конкретное обсудить.
#  Пока соберем идеи, определим, что в приоритете, ну и, наверное, начнем с тестирования на небольшой
#  группе пользователей. Может быть, по несколько тысяч человек, чтобы понять, как они вообще
#  реагируют на эти изменения. Ну, и по аналитике посмотрим, как это повлияет на основные метрики.
# Ладно, если больше ни у кого нет вопросов, давайте пока на этом остановимся и через пару дней
#  вернемся к обсуждению. Спасибо всем за идеи, я думаю, у нас много материала для работы.
# """
# async def main():
#     global text
#     summarizer = AsyncSummarizer()
#     summary = await summarizer.summarize_large_text(text)
#     print("Summary:", summary)

# asyncio.run(main())

# Вывод:

# Summary: Хотелось бы начать с того, что у нас накопилось по поводу наших пользовательских метрик
#  и вовлеченности, потому что вроде показатели растут, но неравномерно, и особенно есть моменты,
#  которые стоит еще раз посмотреть, потому что видно, что там что-то буксует. Эм… ну, как бы да,
#  можем, конечно, снова вернуться к идее добавления каких-то уведомлений или подсказок, которые
#  помогут ориентироваться. Да-да, я помню, мы обсуждали это еще пару месяцев назад, но вроде тогда решили,
#  что это может перегружать интерфейс. Но может, стоит все-таки вернуться к этому.
# Ага, вот еще на одном проекте я видел такую штуку, там они дают скидки в зависимости от того,
#  как долго клиент остается на платформе, — что-то такое не хотите попробовать?
#  Мы тут получили несколько комментариев, что люди не всегда могут быстро получить ответ на свои вопросы.
#  Мы можем начать с какого-то простого решения, вроде FAQ, который реально легко найти,
#  чтобы пользователи могли сразу видеть ответы на популярные вопросы. Да, это тоже ресурс затратно,
#  но, мне кажется, на этапе первого знакомства это может сильно помочь.
# Да, еще по поводу нагрузки на сервер, ведь чем больше у нас функций, тем выше нагрузка, и это нужно тоже
#  учитывать, особенно если мы решим добавить всякие награды и бонусы. Ладно, если больше ни
#  у кого нет вопросов, давайте пока на этом остановимся и через пару дней вернемся к обсуждению.